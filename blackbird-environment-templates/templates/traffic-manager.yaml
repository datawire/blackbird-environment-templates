---
# Source: telepresence/templates/trafficManagerRbac/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: traffic-manager
  namespace: "{{ .Values.AmbassadorNamespace }}"
  labels:
    app: traffic-manager
    telepresence: manager
    helm.sh/chart: telepresence-{{ .Values.TelepresenceVersion }}
    app.kubernetes.io/version: "{{ .Values.TelepresenceVersion }}"
---
# Source: telepresence/templates/agentInjectorWebhook.yaml
apiVersion: v1
kind: Secret
metadata:
  name: mutator-webhook-tls
  namespace: "{{ .Values.AmbassadorNamespace }}"
  labels:
    app: traffic-manager
    telepresence: manager
    helm.sh/chart: telepresence-{{ .Values.TelepresenceVersion }}
    app.kubernetes.io/version: "{{ .Values.TelepresenceVersion }}"
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJekNDQWd1Z0F3SUJBZ0lRUnRSS3cwUHdOWWViM3diRVBWUEpTakFOQmdrcWhraUc5dzBCQVFzRkFEQWMKTVJvd0dBWURWUVFERXhGaFoyVnVkQzFwYm1wbFkzUnZjaTFqWVRBZUZ3MHlOREV4TVRVeE9UQTRNemxhRncweQpOVEV4TVRVeE9UQTRNemxhTUJ3eEdqQVlCZ05WQkFNVEVXRm5aVzUwTFdsdWFtVmpkRzl5TFdOaE1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTBQb0VNQ2cyVUFYYU1TckpBS1pUOWduNGV1VkgKSDBhWXAzTmdoMjNDY2tFUVI3aVNOTk43YVM5cXk1dXM4L1p4Q0IraTlscGJFQkdZT0JhbFQ5ajBNbzVWZlQ5NQphUnA1WHF3ZTA5TExQaEN4RGtiNkdnV2hQVlZGcUNVaTJEV0FKWUVaL2NyMkNrWitMOXJ0eDBMaTNzMGpPRjRnCnZ2NU85WERmeTJtU2hLb0ljREwyZXVtM0Q1cUhSNjl3TEhNbkVRM2V3d1pvU1BHSWxRZXNHbndwenF5UnR0L3EKZ3Q2MUdISTdkTTlaVGNyNHd5TC8vdm8vd1h3ODU4OG5CWnRFMDVUeVp3cXZrcTBHb0dIR1QrcC9nbkhWaGZwYgp3OVVGLzdHYzBaUlJ1aE1mcTU5cUphZlBFN2p6S3pUdkZ5VUVCdkttZEdQSkoySWIraXFmaEJ3L3d3SURBUUFCCm8yRXdYekFPQmdOVkhROEJBZjhFQkFNQ0FxUXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUYKQndNQ01BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZLbUpZcitRS3JkRUVrVU1Cb3NpOGh1egp6K2FMTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFDWmdhTnNDVWoyMTRxaDRsR0hxUGxJK3d2TXAzMS9IUDIrCkJVTnZyTHE2U3RKek80QzhiRFFwWVFGN3BIVG04QitJUm9nVXgvRHN0YWREVkJXRHJHRnVoVU9KRmN0dmpHRngKam0xTHVQVVl0YVFiU1Z0ZktxZEpLY0dFMlovck82UEFkY3JOSzFScnExdGRVcjBqa0c0eXVjYVhpcklIUmxxTQpTS1FuMWF5MDR3ZlpqcGlYNVlWN0RQMEFFaHFjd3FlZGFjY2JlOVFoK0ltVlZWdmNUYktNQlUvUUNRbzJTdHJrCmpFSVBoRnVCejBjNE1UUGIzR0pxeVhoK28wOUJ5THJSUnNoalJLVU5kdXFnT0xlMmgvcDVKS04yd09WUThNQ24KeFNsVG9PdDQ5Sk5YS0ZNQ2lCL3QvTm1OM0VwbC82cHpDcVBlbTNGNU9FaEx1UEJJR1piRgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURaakNDQWs2Z0F3SUJBZ0lRZDRVSnFzbDFwRWxwUDN2SHhFaXFEakFOQmdrcWhraUc5dzBCQVFzRkFEQWMKTVJvd0dBWURWUVFERXhGaFoyVnVkQzFwYm1wbFkzUnZjaTFqWVRBZUZ3MHlOREV4TVRVeE9UQTRNemxhRncweQpOVEV4TVRVeE9UQTRNemxhTUJreEZ6QVZCZ05WQkFNVERtRm5aVzUwTFdsdWFtVmpkRzl5TUlJQklqQU5CZ2txCmhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBM1ZqRHVkbVNjNnpyaUFYNGRmMjV6UnhPTGN1eFFTdTcKdjJRTnlwc01ta2xtaWNlSmZjdUZJZ3h0NE5sWk9qbDFMbENMUitQanR1YVVENEZSLzNhN0RCNXpka0NmOEYrdApsaGlXR2RGT29HVldlSTJxL3NHUnBFSCtpUUdNdk1ydGUrVTh0akprSDRjSEQzTTcveW5jSm1RVTlqOFlWYVFoCnl4cHVobTcrclRObDJxZ3JoQk5ldHZPMjBOKzZLMTIwcFhZSGlNVVVabldLMHpSQzRISm55VFBXN2V1YzJuUDYKZm5iTlpvcXB6NjRwK2Zuc3FUVU9CdUk2U2kwQUpNbXp6dXVtS3kweEZXMkxRNVQzdXg0NUZSU3ozU0grQUFUOAp4NngzOCttVURFYWxLT3ZMYm9aY3VWU0tFTit6aGNkamhVMEJnY1NLR082YnlkeVJRTXIrcXdJREFRQUJvNEdtCk1JR2pNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUgKQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JTcGlXSy9rQ3EzUkJKRkRBYUxJdkliczgvbQppekJEQmdOVkhSRUVQREE2Z2hsaFoyVnVkQzFwYm1wbFkzUnZjaTVoYldKaGMzTmhaRzl5Z2gxaFoyVnVkQzFwCmJtcGxZM1J2Y2k1aGJXSmhjM05oWkc5eUxuTjJZekFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBT2lucUE3SEoKbjJ5RjFrTFhIL1BhdUZOVmZTMW4rWE9SOG9yd2phZHloU05KUHRVQXo5R0pNUVp5T2hodTdsQUo5R2tBOGVuMApxSUJsMkVYL2FZSW16YU5rMzhxc0IyT1hVbTZEc1doMnVSR1RQQ0xlMzVIVEdkUjRjYTNuN2dtQ28vWWZMMW93CjM5dmtMVXJXSXY0Skl3bWkzcFRSMlVlOFdGZUpuaDdiaDhMWEVtdWEyOEVyQVgvdmQwZ3FOb3pLWC9aZ3hueVoKRFBtTmk1RTR4ZWp6eldvVUdIdkZreWt3TlJCWG0zZVVHQWNORVhlbkVSSWk2MmpwVi8rNFVkWldYOG9KWmtHaApCK2FNRGFUSE0xMDJlWk0zU3p4OElzeXZCenBBZVkzUkxyanpZOG51aDc4NUpTN3pLMU5WOVZQT213c2lJOXpKCmo2dHFSdjJmUWlibWFnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBM1ZqRHVkbVNjNnpyaUFYNGRmMjV6UnhPTGN1eFFTdTd2MlFOeXBzTW1rbG1pY2VKCmZjdUZJZ3h0NE5sWk9qbDFMbENMUitQanR1YVVENEZSLzNhN0RCNXpka0NmOEYrdGxoaVdHZEZPb0dWV2VJMnEKL3NHUnBFSCtpUUdNdk1ydGUrVTh0akprSDRjSEQzTTcveW5jSm1RVTlqOFlWYVFoeXhwdWhtNytyVE5sMnFncgpoQk5ldHZPMjBOKzZLMTIwcFhZSGlNVVVabldLMHpSQzRISm55VFBXN2V1YzJuUDZmbmJOWm9xcHo2NHArZm5zCnFUVU9CdUk2U2kwQUpNbXp6dXVtS3kweEZXMkxRNVQzdXg0NUZSU3ozU0grQUFUOHg2eDM4K21VREVhbEtPdkwKYm9aY3VWU0tFTit6aGNkamhVMEJnY1NLR082YnlkeVJRTXIrcXdJREFRQUJBb0lCQVFDanR0aWxhSmhhdUlaSQp5R202RTUxT2FPWW1GeWVXbFZzN055ekFNeWdDSWRJV2pDQlVpNmgvdzRPdHIvVEFET2x3QlNEUFhtMzV4TmUwCkZDbHE4dzFyN0VYb0srcGdKdFJFVlJFSUxYaWpSL0RLSDdaZTBSc0F5OU1RMExXZ21kTkhOUWxQbFR2YTJjdE8KRVNSS0dWTDhqaisyMW5vUU5lTE16MUw2V2JSQ3M0WGoxbTNDMjFnalk1ZjJFWnVUZ3hYalg0QUdvVm9VZ0hnUwpFRkQrbktHeFlnV1l6U3dnUTJxZjV2SWhxa3pmNlplVWFJMDR5T09xWGtQOVR5ODIrdE53ZUNuY3JwYUNYTlNaCndVRGg3cDArN3pYM3cya0o1S3BxNmxFV3lUbUo0YlBtTGtDZ2tBbE4vTTkvSkwySERCMytPdWJJc2hXWDJzN3UKYnE3Tm1BbnhBb0dCQU9QSkF5VVhEaCtVS2x4c1hETzA5LzZuUWY1TkFjclYrQkZ3akt6aXp6UXN0UngwUkFqaQpMdml4cUhYUlRQQVE5eVZMTkdMMnJaRHQvQjM1RXc5U1IzajJIM1ZuekhnNksrWVRPNkR2SVB2STVjRHA1bjZtCllDUXBxRlFQc0xLNzB6RTRIRldLUkRjT3JpNTE0MjNkWG5rZ25MaWJtMlBqcGM3L3l0djRJYStEQW9HQkFQakQKbHp1RVpSb2huRGVqWThxMlJBZXVldW9HanArMVZGczE1aUJyUjNGZTRvK09HdC9Pakw1UENNdVdyT043WFl6MgpEQmUwU0RTek1UQURVcVlBV3ZvamtTTjhvZTg0NnhjajRzcTFxWjZ0S1V4dVlTb245QzRZM3ZjVm9JTmdHU0luCnZDbm55R1NaTEdaVG9QQnZUaHVJclFhd2pSSGF0L3VaOXNSY1J1TzVBb0dCQU5yYVRCbzd2NGNadldXVmV6VDIKMy9zY3lteEJvc0kydUtSUTVlaEo5dGpqUjVPeUpaZi9jUy9peWIrQlBCRy95eVZhejFkeU9Lcng3UFVEVll1MworeEcrTDlXR3lFNlBYWlF0MEhHOHI0MGFwWnluWHAwNnowNlBjN3BvWk5ZbFhqR0Evc0ExRzN0bXNIWFZNSkZqClNweklkNnRyWG00bjBDeEZXYXZsQ01CdkFvR0FUNHBpb2RJc2JaV1BtSzZ5cXM5cW96WWo4UTVWcmpWUm1yUjYKTjZWMXU0ZEdVL1p4RzF5MDNlanhlLzlhbW9ZSW5KalR0d1NiRGRhNkJJc2JjeDZyK0UxRkRCNit2SG5ybVlPTQo4Wm55ZVYwTzFuUjR0dno5YzN2YVZ4RGdPUUdTSjd5aXlwZGxHTjF0Tis3SGgvbGU5U2pYZ2tzVFlFRWFFT1hpCjVGaEpCbWtDZ1lFQXNGMXo4SUJvbTBLbTVtbkJNSFlxWWRVemd6L2pqY2tZNHUyZ0NUWTJkdGUxaDh1L3p1c2QKMFA2V3pmaVlGZWJXWjJZbU4yRVE1Ly9PTFE5THFmR0xKNUJOS2tHUkZQQVN6NENIeUpBUDBQMFlaclAyR1Y2WQpnMkp4Uk5rNDlkdnlvcUM0QVE2dkVpWVRQcWZEUldnZXJtR3VXQ3JzUHh1OU1sa25Hc292Syt3PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: telepresence/templates/agent-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: telepresence-agents
  namespace: "{{ .Values.AmbassadorNamespace }}"
---
# Source: telepresence/templates/intercept-env-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: telepresence-intercept-env
  namespace: "{{ .Values.AmbassadorNamespace }}"
data:
  excluded: |
---
# Source: telepresence/templates/trafficManager-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: traffic-manager
  namespace: "{{ .Values.AmbassadorNamespace }}"
data:
  client.yaml: |
    connectionTTL: 24h
    dns:
      excludeSuffixes:
      - .com
      - .io
      - .net
      - .org
      - .ru
      includeSuffixes: []
    routing:
      allowConflictingSubnets: []
      alsoProxySubnets: []
      neverProxySubnets: []
---
# Source: telepresence/templates/trafficManagerRbac/cloud-token.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: traffic-manager-agent-cloud-token
  namespace: "{{ .Values.AmbassadorNamespace }}"
  labels:
    app: traffic-manager
    telepresence: manager
    helm.sh/chart: telepresence-{{ .Values.TelepresenceVersion }}
    app.kubernetes.io/version: "{{ .Values.TelepresenceVersion }}"
---
# Source: telepresence/templates/trafficManagerRbac/cluster-scope.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: traffic-manager-ambassador
  labels:
    app: traffic-manager
    telepresence: manager
    helm.sh/chart: telepresence-{{ .Values.TelepresenceVersion }}
    app.kubernetes.io/version: "{{ .Values.TelepresenceVersion }}"
rules:
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  - nodes
  - pods
  - services
  verbs:
  - list
  - get
  - watch
- apiGroups:
  - ""
  resources:
  - pods/log
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - list
  - get
  - watch
  - update
  - delete
  resourceNames:
  - telepresence-agents
  - telepresence-intercept-env
- apiGroups:
  - "apps"
  resources:
  - deployments
  - replicasets
  - statefulsets
  verbs:
  - get
  - list
  - watch
  - patch
- apiGroups:
  - "events.k8s.io"
  resources:
    - events
  verbs:
    - get
    - watch
---
# Source: telepresence/templates/trafficManagerRbac/cluster-scope.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: traffic-manager-ambassador
  labels:
    app: traffic-manager
    telepresence: manager
    helm.sh/chart: telepresence-{{ .Values.TelepresenceVersion }}
    app.kubernetes.io/version: "{{ .Values.TelepresenceVersion }}"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: traffic-manager-ambassador
subjects:
- kind: ServiceAccount
  name: traffic-manager
  namespace: "{{ .Values.AmbassadorNamespace }}"
---
# Source: telepresence/templates/trafficManagerRbac/cloud-token.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: "{{ .Values.AmbassadorNamespace }}"
  name: traffic-manager-cloud-token
  labels:
    app: traffic-manager
    telepresence: manager
    helm.sh/chart: telepresence-{{ .Values.TelepresenceVersion }}
    app.kubernetes.io/version: "{{ .Values.TelepresenceVersion }}"
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - list
      - watch
      - patch
---
# Source: telepresence/templates/trafficManagerRbac/namespace-scope.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: "{{ .Values.AmbassadorNamespace }}"
  name: traffic-manager
  labels:
    app: traffic-manager
    telepresence: manager
    helm.sh/chart: telepresence-{{ .Values.TelepresenceVersion }}
    app.kubernetes.io/version: "{{ .Values.TelepresenceVersion }}"
rules:
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - create
---
# Source: telepresence/templates/trafficManagerRbac/webhook-secret.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: "{{ .Values.AmbassadorNamespace }}"
  name: agent-injector-webhook-secret
  labels:
    app: traffic-manager
    telepresence: manager
    helm.sh/chart: telepresence-{{ .Values.TelepresenceVersion }}
    app.kubernetes.io/version: "{{ .Values.TelepresenceVersion }}"
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  resourceNames: [ mutator-webhook-tls ]
  verbs:
  - get
  - list
  - watch
---
# Source: telepresence/templates/trafficManagerRbac/cloud-token.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: traffic-manager-cloud-token
  namespace: "{{ .Values.AmbassadorNamespace }}"
  labels:
    app: traffic-manager
    telepresence: manager
    helm.sh/chart: telepresence-{{ .Values.TelepresenceVersion }}
    app.kubernetes.io/version: "{{ .Values.TelepresenceVersion }}"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: traffic-manager-cloud-token
subjects:
  - kind: ServiceAccount
    name: traffic-manager
    namespace: "{{ .Values.AmbassadorNamespace }}"
---
# Source: telepresence/templates/trafficManagerRbac/namespace-scope.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: traffic-manager
  namespace: "{{ .Values.AmbassadorNamespace }}"
  labels:
    app: traffic-manager
    telepresence: manager
    helm.sh/chart: telepresence-{{ .Values.TelepresenceVersion }}
    app.kubernetes.io/version: "{{ .Values.TelepresenceVersion }}"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: traffic-manager
subjects:
- kind: ServiceAccount
  name: traffic-manager
  namespace: "{{ .Values.AmbassadorNamespace }}"
---
# Source: telepresence/templates/trafficManagerRbac/webhook-secret.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: agent-injector-webhook-secret
  namespace: "{{ .Values.AmbassadorNamespace }}"
  labels:
    app: traffic-manager
    telepresence: manager
    helm.sh/chart: telepresence-{{ .Values.TelepresenceVersion }}
    app.kubernetes.io/version: "{{ .Values.TelepresenceVersion }}"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: agent-injector-webhook-secret
subjects:
  - kind: ServiceAccount
    name: traffic-manager
    namespace: "{{ .Values.AmbassadorNamespace }}"
---
# Source: telepresence/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: traffic-manager
  namespace: "{{ .Values.AmbassadorNamespace }}"
  labels:
    app: traffic-manager
    telepresence: manager
    helm.sh/chart: telepresence-{{ .Values.TelepresenceVersion }}
    app.kubernetes.io/version: "{{ .Values.TelepresenceVersion }}"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: api
    port: 8081
    targetPort: api
  selector:
    app: traffic-manager
    telepresence: manager
---
# Source: telepresence/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: agent-injector
  namespace: "{{ .Values.AmbassadorNamespace }}"
  labels:
    app: traffic-manager
    telepresence: manager
    helm.sh/chart: telepresence-{{ .Values.TelepresenceVersion }}
    app.kubernetes.io/version: "{{ .Values.TelepresenceVersion }}"
spec:
  type: ClusterIP
  ports:
  - name: https
    port: 443
    targetPort: https
  selector:
    app: traffic-manager
    telepresence: manager
---
# Source: telepresence/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: traffic-manager
  namespace: "{{ .Values.AmbassadorNamespace }}"
  labels:
    app: traffic-manager
    telepresence: manager
    helm.sh/chart: telepresence-{{ .Values.TelepresenceVersion }}
    app.kubernetes.io/version: "{{ .Values.TelepresenceVersion }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: traffic-manager
      telepresence: manager
  template:
    metadata:
      labels:
        app: traffic-manager
        telepresence: manager
    spec:
      securityContext:
        {}
      containers:
        - name: traffic-manager
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          image: "docker.io/datawire/ambassador-telepresence-manager:{{ .Values.TelepresenceVersion }}"
          imagePullPolicy: IfNotPresent
          env:
          - name: LOG_LEVEL
            value: info
          - name: REGISTRY
            value: docker.io/datawire
          - name: SERVER_PORT
            value: "8081"
          - name: POD_CIDR_STRATEGY
            value: auto
          - name: MUTATOR_WEBHOOK_PORT
            value: "443"
          - name: AGENT_INJECTOR_SECRET
            value: mutator-webhook-tls
          - name: GRPC_MAX_RECEIVE_SIZE
            value: 4Mi
          - name: ARGO_ROLLOUTS_ENABLED
            value: "false"
          - name: AGENT_ARRIVAL_TIMEOUT
            value: "30s"
          - name: AGENT_INJECT_POLICY
            value: OnDemand
          - name: AGENT_INJECTOR_NAME
            value: "agent-injector"
          - name: AGENT_PORT
            value: "9900"
          - name: AGENT_APP_PROTO_STRATEGY
            value: http2Probe
          - name: AGENT_IMAGE_NAME
            value: ambassador-telepresence-agent
          - name: AGENT_IMAGE_TAG
            value: 1.14.6-test.1
          - name: AGENT_REGISTRY
            value: docker.io/datawire
          - name: AGENT_IMAGE_PULL_POLICY
            value: IfNotPresent
          - name: PROMETHEUS_PORT
            value: "0"
          - name: MANAGER_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: CLIENT_CONNECTION_TTL
            value: 24h
          - name: CLIENT_DNS_EXCLUDE_SUFFIXES
            value: ".com .io .net .org .ru"
          - name: SYSTEMA_HOST
            value: ""
          - name: SYSTEMA_PORT
            value: "0"
          - name: INTERCEPT_DISABLE_GLOBAL
            value: "false"
          - name: INTERCEPT_EXPIRED_NOTIFICATIONS_ENABLED
            value: "false"
          - name: INTERCEPT_EXPIRED_NOTIFICATIONS_DEADLINE
            value: "15m"
          - name: AGENT_ENVOY_LOG_LEVEL
            value: warning
          - name: AGENT_ENVOY_SERVER_PORT
            value: "18000"
          - name: AGENT_ENVOY_ADMIN_PORT
            value: "19000"
          - name: AGENT_ENVOY_HTTP_IDLE_TIMEOUT
            value: 70s
          ports:
          - name: api
            containerPort: 8081
          - name: https
            containerPort: 443
          volumeMounts:
          - name: license
            mountPath: /home/telepresence
            readOnly: true
      volumes:
      - name: license
        secret:
          defaultMode: 420
          secretName: blackbird-traffic-manager-license
      serviceAccount: traffic-manager
      serviceAccountName: traffic-manager
---
# Source: telepresence/templates/agentInjectorWebhook.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: agent-injector-webhook-ambassador
  labels:
    app: traffic-manager
    telepresence: manager
    helm.sh/chart: telepresence-{{ .Values.TelepresenceVersion }}
    app.kubernetes.io/version: "{{ .Values.TelepresenceVersion }}"
webhooks:
- admissionReviewVersions:
  - v1
  clientConfig:
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJekNDQWd1Z0F3SUJBZ0lRUnRSS3cwUHdOWWViM3diRVBWUEpTakFOQmdrcWhraUc5dzBCQVFzRkFEQWMKTVJvd0dBWURWUVFERXhGaFoyVnVkQzFwYm1wbFkzUnZjaTFqWVRBZUZ3MHlOREV4TVRVeE9UQTRNemxhRncweQpOVEV4TVRVeE9UQTRNemxhTUJ3eEdqQVlCZ05WQkFNVEVXRm5aVzUwTFdsdWFtVmpkRzl5TFdOaE1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTBQb0VNQ2cyVUFYYU1TckpBS1pUOWduNGV1VkgKSDBhWXAzTmdoMjNDY2tFUVI3aVNOTk43YVM5cXk1dXM4L1p4Q0IraTlscGJFQkdZT0JhbFQ5ajBNbzVWZlQ5NQphUnA1WHF3ZTA5TExQaEN4RGtiNkdnV2hQVlZGcUNVaTJEV0FKWUVaL2NyMkNrWitMOXJ0eDBMaTNzMGpPRjRnCnZ2NU85WERmeTJtU2hLb0ljREwyZXVtM0Q1cUhSNjl3TEhNbkVRM2V3d1pvU1BHSWxRZXNHbndwenF5UnR0L3EKZ3Q2MUdISTdkTTlaVGNyNHd5TC8vdm8vd1h3ODU4OG5CWnRFMDVUeVp3cXZrcTBHb0dIR1QrcC9nbkhWaGZwYgp3OVVGLzdHYzBaUlJ1aE1mcTU5cUphZlBFN2p6S3pUdkZ5VUVCdkttZEdQSkoySWIraXFmaEJ3L3d3SURBUUFCCm8yRXdYekFPQmdOVkhROEJBZjhFQkFNQ0FxUXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUYKQndNQ01BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZLbUpZcitRS3JkRUVrVU1Cb3NpOGh1egp6K2FMTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFDWmdhTnNDVWoyMTRxaDRsR0hxUGxJK3d2TXAzMS9IUDIrCkJVTnZyTHE2U3RKek80QzhiRFFwWVFGN3BIVG04QitJUm9nVXgvRHN0YWREVkJXRHJHRnVoVU9KRmN0dmpHRngKam0xTHVQVVl0YVFiU1Z0ZktxZEpLY0dFMlovck82UEFkY3JOSzFScnExdGRVcjBqa0c0eXVjYVhpcklIUmxxTQpTS1FuMWF5MDR3ZlpqcGlYNVlWN0RQMEFFaHFjd3FlZGFjY2JlOVFoK0ltVlZWdmNUYktNQlUvUUNRbzJTdHJrCmpFSVBoRnVCejBjNE1UUGIzR0pxeVhoK28wOUJ5THJSUnNoalJLVU5kdXFnT0xlMmgvcDVKS04yd09WUThNQ24KeFNsVG9PdDQ5Sk5YS0ZNQ2lCL3QvTm1OM0VwbC82cHpDcVBlbTNGNU9FaEx1UEJJR1piRgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    service:
      name: agent-injector
      namespace: "{{ .Values.AmbassadorNamespace }}"
      path: /traffic-agent
      port: 443
  rules:
  - apiGroups:
    - ""
    apiVersions:
    - v1
    operations:
    - CREATE
    - DELETE
    resources:
    - pods
    scope: '*'
  failurePolicy: Ignore
  reinvocationPolicy: IfNeeded
  name: agent-injector-ambassador.getambassador.io
  sideEffects: None
  timeoutSeconds: 5
  namespaceSelector:
    matchExpressions:
    - key: kubernetes.io/metadata.name
      operator: NotIn
      values:
      - kube-system
      - kube-node-lease
